#!/bin/bash

NEXT=$1
MESSAGE=$2

if [[ $# < 1 ]]; then
    echo -e "usage: git release increment:patch|minor|major|init|x.x.x [message]"
    exit 1
fi

git fetch --tags 2> /dev/null

LAST_VERSION=$(git describe --abbrev=0 --tags --match="v*" 2> /dev/null)
VERSION=$(echo "$LAST_VERSION" | tr -d "v")

NEXT_VERSION="v$(bump "$NEXT" "$VERSION")"
if [[ $? != 0 ]]; then
    exit 1
fi

if [[ ( -z "$MESSAGE" ) || ( "$MESSAGE" == "auto" ) ]]; then
    MESSAGE=$(git log $LAST_VERSION..HEAD --no-merges --oneline | cut -d " " -f "2-" | sed -e 's/^/- /')
fi

git hook pre-release $NEXT_VERSION $LAST_VERSION ${@:3}
if [[ $? != 0 ]]; then
    echo "exit because pre-release exit with $?"
    exit 1
fi

git tag -a $NEXT_VERSION -m "$MESSAGE"
if [[ $? != 0 ]]; then
    echo "couldn't tag"
    exit 1
fi

echo "$NEXT_VERSION"

git hook post-release "$NEXT_VERSION" "$LAST_VERSION"

GIT_HOST=$(git host)
BODY="Release of version $NEXT_VERSION\n\n$MESSAGE"
NAME="$VERSION"
if [[ "$GIT_HOST" == "github.com" && -n "$GITHUB_TOKEN" ]]; then
    REPO=$(git name)
    DATA='{"tag_name": "'$NEXT_VERSION'","target_commitish": "master","name": "'$NAME'","body": "'$BODY'","draft": false,"prerelease": false}'
    curl --request POST \
        --url "https://api.github.com/repos/$REPO/releases" \
        --header "Content-Type: application/json" \
        --header "Authentication: token $GITHUB_TOKEN" \
        --data "$DATA"
elif [[ "$GIT_HOST" == "gitlab.com" && -n "$GITLAB_TOKEN" ]]; then
    DATA='{"name": "'$NAME'", "tag_name": "'$NEXT_VERSION'", "description": "'$BODY'", "ref": "'$REF'" }'
    URL="https://gitlab.com/api/v4/projects/$PROJECT_ID/releases"
    curl --request POST \
        --url "$URL" \
        --header "Content-Type: application/json" \
        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --data "$DATA"
fi
